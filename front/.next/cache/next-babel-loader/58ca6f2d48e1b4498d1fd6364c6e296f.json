{"ast":null,"code":"import { all, fork, put, takeLatest, delay, take } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_OUT_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_FAILURE } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga login'); //const result = yield call(logInAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    //const result = yield call(logOutAPI) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/signUp');\n}\n\nfunction* signUp() {\n  try {\n    //const result = yield call(signUpAPI) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_REQUEST\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // takeLatest 실수로 로그인 따닥 두번 실행했을 때 앞에 실수거는 무시되고 마지막것만 요청됨\n  // while로 감싸는 이유? 이거 이벤트리스너같은건데 일회용이라서 => takeEvery\n  yield takeLatest(LOG_IN_REQUEST, logIn); // take란 LOG_IN 액션이 실행될 때 까지 기다리겠다\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"names":["all","fork","put","takeLatest","delay","take","axios","LOG_IN_SUCCESS","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_OUT_SUCCESS","LOG_OUT_REQUEST","LOG_OUT_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_FAILURE","logInAPI","data","post","logIn","action","console","log","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"sources":["C:/Users/leeoo/Desktop/teamProject/front/sagas/user.js"],"sourcesContent":["import { all, fork, put, takeLatest, delay, take } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport { \r\n    LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_IN_FAILURE,\r\n    LOG_OUT_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE,\r\n    SIGN_UP_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_FAILURE,\r\n} from '../reducers/user';\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        console.log('saga login');\r\n        //const result = yield call(logInAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        } catch (err) {\r\n            yield put({\r\n                type: LOG_IN_FAILURE,\r\n                error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        //const result = yield call(logOutAPI) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n        } catch (err) {\r\n            yield put({\r\n                type: LOG_OUT_FAILURE,\r\n                error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction signUpAPI() {\r\n    return axios.post('/api/signUp');\r\n}\r\n\r\nfunction* signUp() {\r\n    try {\r\n        //const result = yield call(signUpAPI) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        yield put({\r\n            type: SIGN_UP_REQUEST,\r\n        });\r\n        } catch (err) {\r\n            yield put({\r\n                type: SIGN_UP_FAILURE,\r\n                error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    // takeLatest 실수로 로그인 따닥 두번 실행했을 때 앞에 실수거는 무시되고 마지막것만 요청됨\r\n    // while로 감싸는 이유? 이거 이벤트리스너같은건데 일회용이라서 => takeEvery\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);  // take란 LOG_IN 액션이 실행될 때 까지 기다리겠다\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);  \r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,cADJ,EACoBC,cADpB,EACoCC,cADpC,EAEIC,eAFJ,EAEqBC,eAFrB,EAEsCC,eAFtC,EAGIC,eAHJ,EAGqBC,eAHrB,EAGsCC,eAHtC,QAIO,kBAJP;;AAMA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;EACpB,OAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;EACpB,IAAI;IACAC,OAAO,CAACC,GAAR,CAAY,YAAZ,EADA,CAEA;;IACA,MAAMlB,KAAK,CAAC,IAAD,CAAX;IACA,MAAMF,GAAG,CAAC;MACNqB,IAAI,EAAEhB,cADA;MAENU,IAAI,EAAEG,MAAM,CAACH;IAFP,CAAD,CAAT;EAIC,CARL,CAQM,OAAOO,GAAP,EAAY;IACV,MAAMtB,GAAG,CAAC;MACNqB,IAAI,EAAEd,cADA;MAENgB,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT;IAFd,CAAD,CAAT;EAIP;AACJ;;AAED,SAASU,SAAT,GAAqB;EACjB,OAAOrB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUU,MAAV,GAAmB;EACf,IAAI;IACA;IACA,MAAMxB,KAAK,CAAC,IAAD,CAAX;IACA,MAAMF,GAAG,CAAC;MACNqB,IAAI,EAAEb;IADA,CAAD,CAAT;EAGC,CANL,CAMM,OAAOc,GAAP,EAAY;IACV,MAAMtB,GAAG,CAAC;MACNqB,IAAI,EAAEX,eADA;MAENa,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT;IAFd,CAAD,CAAT;EAIP;AACJ;;AAED,SAASY,SAAT,GAAqB;EACjB,OAAOvB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUY,MAAV,GAAmB;EACf,IAAI;IACA;IACA,MAAM1B,KAAK,CAAC,IAAD,CAAX;IACA,MAAMF,GAAG,CAAC;MACNqB,IAAI,EAAET;IADA,CAAD,CAAT;EAGC,CANL,CAMM,OAAOU,GAAP,EAAY;IACV,MAAMtB,GAAG,CAAC;MACNqB,IAAI,EAAER,eADA;MAENU,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT;IAFd,CAAD,CAAT;EAIP;AACJ;;AAED,UAAUc,UAAV,GAAuB;EACnB;EACA;EACA,MAAM5B,UAAU,CAACK,cAAD,EAAiBW,KAAjB,CAAhB,CAHmB,CAGuB;AAC7C;;AAED,UAAUa,WAAV,GAAwB;EACpB,MAAM7B,UAAU,CAACQ,eAAD,EAAkBiB,MAAlB,CAAhB;AACH;;AAED,UAAUK,WAAV,GAAwB;EACpB,MAAM9B,UAAU,CAACW,eAAD,EAAkBgB,MAAlB,CAAhB;AACH;;AAED,eAAe,UAAUI,QAAV,GAAqB;EAChC,MAAMlC,GAAG,CAAC,CACNC,IAAI,CAAC8B,UAAD,CADE,EAEN9B,IAAI,CAAC+B,WAAD,CAFE,EAGN/B,IAAI,CAACgC,WAAD,CAHE,CAAD,CAAT;AAKH"},"metadata":{},"sourceType":"module"}