{"ast":null,"code":"import { all, delay, put, takeLatest, fork } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from \"../reducers/post\";\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addCommentAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","delay","put","takeLatest","fork","axios","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","addPostAPI","data","post","addPost","action","type","result","err","response","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga"],"sources":["C:/Users/leeoo/Desktop/teamProject/front/sagas/post.js"],"sourcesContent":["import { all, delay, put, takeLatest, fork } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport { \r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n} from \"../reducers/post\";\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n        } catch (err) {\r\n            yield put({\r\n                type: ADD_POST_FAILURE,\r\n                data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        //const result = yield call(addCommentAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data\r\n        });\r\n        } catch (err) {\r\n            yield put({\r\n                type: ADD_COMMENT_FAILURE,\r\n                data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,GAArB,EAA0BC,UAA1B,EAAsCC,IAAtC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,mBADJ,EACyBC,mBADzB,EAC8CC,mBAD9C,EAEIC,gBAFJ,EAEsBC,gBAFtB,EAEwCC,gBAFxC,QAGO,kBAHP;;AAKA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;EACtB,OAAOR,KAAK,CAACS,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;EACtB,IAAI;IACA;IACA,MAAMf,KAAK,CAAC,IAAD,CAAX;IACA,MAAMC,GAAG,CAAC;MACNe,IAAI,EAAEP,gBADA;MAENG,IAAI,EAAEK,MAAM,CAACL;IAFP,CAAD,CAAT;EAIC,CAPL,CAOM,OAAOM,GAAP,EAAY;IACV,MAAMjB,GAAG,CAAC;MACNe,IAAI,EAAEN,gBADA;MAENE,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;IAFb,CAAD,CAAT;EAIP;AACJ;;AAED,SAASQ,aAAT,CAAuBR,IAAvB,EAA6B;EACzB,OAAOR,KAAK,CAACS,IAAN,CAAY,aAAYD,IAAI,CAACS,MAAO,UAApC,EAA+CT,IAA/C,CAAP;AACH;;AAED,UAAUU,UAAV,CAAqBP,MAArB,EAA6B;EACzB,IAAI;IACA;IACA,MAAMf,KAAK,CAAC,IAAD,CAAX;IACA,MAAMC,GAAG,CAAC;MACNe,IAAI,EAAEV,mBADA;MAENM,IAAI,EAAEK,MAAM,CAACL;IAFP,CAAD,CAAT;EAIC,CAPL,CAOM,OAAOM,GAAP,EAAY;IACV,MAAMjB,GAAG,CAAC;MACNe,IAAI,EAAET,mBADA;MAENK,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;IAFb,CAAD,CAAT;EAIP;AACJ;;AAED,UAAUW,YAAV,GAAyB;EACrB,MAAMrB,UAAU,CAACM,gBAAD,EAAmBM,OAAnB,CAAhB;AACH;;AAED,UAAUU,eAAV,GAA4B;EACxB,MAAMtB,UAAU,CAACG,mBAAD,EAAsBiB,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;EAChC,MAAM1B,GAAG,CAAC,CACNI,IAAI,CAACoB,YAAD,CADE,EAENpB,IAAI,CAACqB,eAAD,CAFE,CAAD,CAAT;AAIH"},"metadata":{},"sourceType":"module"}