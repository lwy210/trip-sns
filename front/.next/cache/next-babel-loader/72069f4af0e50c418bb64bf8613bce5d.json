{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport { faker } from '@faker-js/faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // 서버에서 데이터 불러오는 거를 이 함수로 일단 대체\n// + 인피니트 스크롤링\n\nexport const generateDummyPost = number => Array(20).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\ninitialState.mainPosts = initialState.mainPosts.concat();\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  }\n}); // 리듀서 : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePost = draft.mainPosts.length < 50; // 50개보다 적으면 hasMorePost가 true. 즉, 50개 게시글만 가져와서 보겠다.\n\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          // immer가 알아서 불변성을 해결해준다.\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading: false,\n          //     addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","concat","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","hasMorePost","length","error","unshift","filter","v","post","find","postId"],"sources":["C:/Users/leeoo/Desktop/teamProject/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport { faker } from '@faker-js/faker';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n};\r\n\r\n// 서버에서 데이터 불러오는 거를 이 함수로 일단 대체\r\n// + 인피니트 스크롤링\r\nexport const generateDummyPost = (number) => Array(20).fill().map(() => ({\r\n    id: shortId.generate(),\r\n    User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName()\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}))\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(\r\n    // generateDummyPost(10)\r\n);\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n});\r\n\r\n// 리듀서 : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case LOAD_POSTS_REQUEST:\r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n    \r\n            case LOAD_POSTS_SUCCESS:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.hasMorePost = draft.mainPosts.length < 50; // 50개보다 적으면 hasMorePost가 true. 즉, 50개 게시글만 가져와서 보겠다.\r\n                break;\r\n\r\n            case LOAD_POSTS_FAILURE:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;\r\n\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n    \r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n    \r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null; \r\n                break;\r\n    \r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n    \r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null; \r\n                break;\r\n    \r\n            case ADD_COMMENT_SUCCESS: {\r\n                // immer가 알아서 불변성을 해결해준다.\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n    \r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading: false,\r\n                //     addCommentDone: true,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n    \r\n            default:\r\n                break;\r\n        }\r\n    }); \r\n};\r\n\r\nexport default reducer;"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AAEA,OAAO,MAAMC,YAAY,GAAG;EACxBC,SAAS,EAAE,EADa;EAExBC,UAAU,EAAE,EAFY;EAGxBC,gBAAgB,EAAE,KAHM;EAIxBC,aAAa,EAAE,KAJS;EAKxBC,cAAc,EAAE,IALQ;EAMxBC,cAAc,EAAE,KANQ;EAOxBC,WAAW,EAAE,KAPW;EAQxBC,YAAY,EAAE,IARU;EASxBC,iBAAiB,EAAE,KATK;EAUxBC,cAAc,EAAE,KAVQ;EAWxBC,eAAe,EAAE,IAXO;EAYxBC,iBAAiB,EAAE,KAZK;EAaxBC,cAAc,EAAE,KAbQ;EAcxBC,eAAe,EAAE;AAdO,CAArB,C,CAiBP;AACA;;AACA,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAYC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,GAAiBC,GAAjB,CAAqB,OAAO;EACrEC,EAAE,EAAEvB,OAAO,CAACwB,QAAR,EADiE;EAErEC,IAAI,EAAE;IACFF,EAAE,EAAEvB,OAAO,CAACwB,QAAR,EADF;IAEFE,QAAQ,EAAExB,KAAK,CAACyB,IAAN,CAAWC,QAAX;EAFR,CAF+D;EAMrEC,OAAO,EAAE3B,KAAK,CAAC4B,KAAN,CAAYC,SAAZ,EAN4D;EAOrEC,MAAM,EAAE,CAAC;IACLC,GAAG,EAAE/B,KAAK,CAACgC,KAAN,CAAYA,KAAZ;EADA,CAAD,CAP6D;EAUrEC,QAAQ,EAAE,CAAC;IACPV,IAAI,EAAE;MACFF,EAAE,EAAEvB,OAAO,CAACwB,QAAR,EADF;MAEFE,QAAQ,EAAExB,KAAK,CAACyB,IAAN,CAAWC,QAAX;IAFR,CADC;IAKPC,OAAO,EAAE3B,KAAK,CAAC4B,KAAN,CAAYM,QAAZ;EALF,CAAD;AAV2D,CAAP,CAArB,CAAtC;AAmBPjC,YAAY,CAACC,SAAb,GAAyBD,YAAY,CAACC,SAAb,CAAuBiC,MAAvB,EAAzB;AAIA,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAGP,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;EAC9BC,IAAI,EAAEX,gBADwB;EAE9BU;AAF8B,CAAX,CAAhB;AAKP,OAAO,MAAME,UAAU,GAAIF,IAAD,KAAW;EACjCC,IAAI,EAAEL,mBAD2B;EAEjCI;AAFiC,CAAX,CAAnB;;AAKP,MAAMG,SAAS,GAAIH,IAAD,KAAW;EACzB5B,EAAE,EAAE4B,IAAI,CAAC5B,EADgB;EAEzBM,OAAO,EAAEsB,IAAI,CAACtB,OAFW;EAGzBJ,IAAI,EAAE;IACFF,EAAE,EAAE,CADF;IAEFG,QAAQ,EAAE;EAFR,CAHmB;EAOzBM,MAAM,EAAE,EAPiB;EAQzBG,QAAQ,EAAE;AARe,CAAX,CAAlB;;AAWA,MAAMoB,YAAY,GAAIJ,IAAD,KAAW;EAC5B5B,EAAE,EAAEvB,OAAO,CAACwB,QAAR,EADwB;EAE5BK,OAAO,EAAEsB,IAFmB;EAG5B1B,IAAI,EAAE;IACFF,EAAE,EAAE,CADF;IAEFG,QAAQ,EAAE;EAFR;AAHsB,CAAX,CAArB,C,CASA;;;AACA,MAAM8B,OAAO,GAAG,CAACC,KAAK,GAAGtD,YAAT,EAAuBuD,MAAvB,KAAkC;EAC9C,OAAOzD,OAAO,CAACwD,KAAD,EAASE,KAAD,IAAW;IAC7B,QAAQD,MAAM,CAACN,IAAf;MACI,KAAKd,kBAAL;QACIqB,KAAK,CAACrD,gBAAN,GAAyB,IAAzB;QACAqD,KAAK,CAACpD,aAAN,GAAsB,KAAtB;QACAoD,KAAK,CAACnD,cAAN,GAAuB,IAAvB;QACA;;MAEJ,KAAK+B,kBAAL;QACIoB,KAAK,CAACrD,gBAAN,GAAyB,KAAzB;QACAqD,KAAK,CAACpD,aAAN,GAAsB,IAAtB;QACAoD,KAAK,CAACvD,SAAN,GAAkBsD,MAAM,CAACP,IAAP,CAAYd,MAAZ,CAAmBsB,KAAK,CAACvD,SAAzB,CAAlB;QACAuD,KAAK,CAACC,WAAN,GAAoBD,KAAK,CAACvD,SAAN,CAAgByD,MAAhB,GAAyB,EAA7C,CAJJ,CAIqD;;QACjD;;MAEJ,KAAKrB,kBAAL;QACImB,KAAK,CAACrD,gBAAN,GAAyB,KAAzB;QACAqD,KAAK,CAACnD,cAAN,GAAuBkD,MAAM,CAACI,KAA9B;QACA;;MAEJ,KAAKrB,gBAAL;QACIkB,KAAK,CAAClD,cAAN,GAAuB,IAAvB;QACAkD,KAAK,CAACjD,WAAN,GAAoB,KAApB;QACAiD,KAAK,CAAChD,YAAN,GAAqB,IAArB;QACA;;MAEJ,KAAK+B,gBAAL;QACIiB,KAAK,CAAClD,cAAN,GAAuB,KAAvB;QACAkD,KAAK,CAACjD,WAAN,GAAoB,IAApB;QACAiD,KAAK,CAACvD,SAAN,CAAgB2D,OAAhB,CAAwBT,SAAS,CAACI,MAAM,CAACP,IAAR,CAAjC;QACA;;MAEJ,KAAKR,gBAAL;QACIgB,KAAK,CAAClD,cAAN,GAAuB,KAAvB;QACAkD,KAAK,CAAChD,YAAN,GAAqB+C,MAAM,CAACI,KAA5B;QACA;;MAEJ,KAAKlB,mBAAL;QACIe,KAAK,CAAC/C,iBAAN,GAA0B,IAA1B;QACA+C,KAAK,CAAC9C,cAAN,GAAuB,KAAvB;QACA8C,KAAK,CAAC7C,eAAN,GAAwB,IAAxB;QACA;;MAEJ,KAAK+B,mBAAL;QACIc,KAAK,CAAC/C,iBAAN,GAA0B,KAA1B;QACA+C,KAAK,CAAC9C,cAAN,GAAuB,IAAvB;QACA8C,KAAK,CAACvD,SAAN,GAAkBuD,KAAK,CAACvD,SAAN,CAAgB4D,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAAC1C,EAAF,KAASmC,MAAM,CAACP,IAA9C,CAAlB;QACA;;MAEJ,KAAKL,mBAAL;QACIa,KAAK,CAAC/C,iBAAN,GAA0B,KAA1B;QACA+C,KAAK,CAAC7C,eAAN,GAAwB4C,MAAM,CAACI,KAA/B;QACA;;MAEJ,KAAKf,mBAAL;QACIY,KAAK,CAAC5C,iBAAN,GAA0B,IAA1B;QACA4C,KAAK,CAAC3C,cAAN,GAAuB,KAAvB;QACA2C,KAAK,CAAC1C,eAAN,GAAwB,IAAxB;QACA;;MAEJ,KAAK+B,mBAAL;QAA0B;UACtB;UACA,MAAMkB,IAAI,GAAGP,KAAK,CAACvD,SAAN,CAAgB+D,IAAhB,CAAsBF,CAAD,IAAOA,CAAC,CAAC1C,EAAF,KAASmC,MAAM,CAACP,IAAP,CAAYiB,MAAjD,CAAb;UACAF,IAAI,CAAC/B,QAAL,CAAc4B,OAAd,CAAsBR,YAAY,CAACG,MAAM,CAACP,IAAP,CAAYtB,OAAb,CAAlC;UACA8B,KAAK,CAAC5C,iBAAN,GAA0B,KAA1B;UACA4C,KAAK,CAAC3C,cAAN,GAAuB,IAAvB;UACA,MANsB,CAOtB;UACA;UACA;UACA;UACA;UAEA;UACA;UACA;UACA;UACA;UACA;QACH;;MACD,KAAKiC,mBAAL;QACIU,KAAK,CAAC5C,iBAAN,GAA0B,KAA1B;QACA4C,KAAK,CAAC1C,eAAN,GAAwByC,MAAM,CAACI,KAA/B;QACA;;MAEJ;QACI;IArFR;EAuFH,CAxFa,CAAd;AAyFH,CA1FD;;AA4FA,eAAeN,OAAf"},"metadata":{},"sourceType":"module"}