{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport { faker } from '@faker-js/faker';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // 서버에서 데이터 불러오는 거를 이 함수로 일단 대체\n// + 인피니트 스크롤링\n\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      Title: faker.lorem.sentence(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }, {\n        src: faker.image.image()\n      }, {\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }],\n      Schedules: [{\n        numberOfTrip: 2,\n        TripDates: [{\n          date: new Date()\n        }, {\n          date: new Date()\n        }],\n        Routes: [{\n          date: new Date(),\n          spots: [{\n            order: 1,\n            spotName: '에버랜드',\n            spotLatitude: 37.29707,\n            spotLogitude: 127.208\n          }, {\n            order: 2,\n            spotName: '롯데월드',\n            spotLatitude: 37.5111,\n            spotLogitude: 127.7472\n          }]\n        }]\n      }]\n    };\n  });\n}; //initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    Title: data.Title,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '이원영'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '이원영'\n    }\n  };\n}; // 리듀서 : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50; // 50개보다 적으면 hasMorePost가 true. 즉, 50개 게시글만 가져와서 보겠다.\n\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          // immer가 알아서 불변성을 해결해준다.\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading: false,\n          //     addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","Title","lorem","sentence","User","nickname","name","findName","content","paragraph","Images","src","image","Comments","Schedules","numberOfTrip","TripDates","date","Date","Routes","spots","order","spotName","spotLatitude","spotLogitude","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","post","find","postId"],"sources":["C:/Users/leeoo/Desktop/teamProject/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport { faker } from '@faker-js/faker';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n};\r\n\r\n// 서버에서 데이터 불러오는 거를 이 함수로 일단 대체\r\n// + 인피니트 스크롤링\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n    id: shortId.generate(),\r\n    Title: faker.lorem.sentence(),\r\n    User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName()\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image()\r\n    }, {\r\n        src: faker.image.image()\r\n    }, {\r\n        src: faker.image.image()\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n    Schedules: [{\r\n        numberOfTrip: 2,\r\n        TripDates: [{\r\n            date: new Date()\r\n        }, {date: new Date()\r\n        },  \r\n        ],\r\n        Routes: [{\r\n            date: new Date(),\r\n            spots: [{\r\n                order: 1,\r\n                spotName: '에버랜드',\r\n                spotLatitude: 37.29707,\r\n                spotLogitude: 127.208, \r\n            }, {\r\n                order: 2,\r\n                spotName: '롯데월드',\r\n                spotLatitude: 37.5111,\r\n                spotLogitude: 127.7472,\r\n            },\r\n        ]\r\n\r\n        }]\r\n\r\n\r\n    }]\r\n}))\r\n\r\n\r\n//initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    Title: data.Title,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '이원영',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: '이원영',\r\n    },\r\n});\r\n\r\n// 리듀서 : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case LOAD_POSTS_REQUEST:\r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n    \r\n            case LOAD_POSTS_SUCCESS:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.hasMorePosts = draft.mainPosts.length < 50; // 50개보다 적으면 hasMorePost가 true. 즉, 50개 게시글만 가져와서 보겠다.\r\n                break;\r\n\r\n            case LOAD_POSTS_FAILURE:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;\r\n\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n    \r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n    \r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null; \r\n                break;\r\n    \r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n    \r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null; \r\n                break;\r\n    \r\n            case ADD_COMMENT_SUCCESS: {\r\n                // immer가 알아서 불변성을 해결해준다.\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n    \r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading: false,\r\n                //     addCommentDone: true,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n    \r\n            default:\r\n                break;\r\n        }\r\n    }); \r\n};\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}