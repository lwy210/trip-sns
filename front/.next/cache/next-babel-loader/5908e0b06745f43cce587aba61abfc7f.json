{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport user from './user';\nimport post from './post';\nimport { combineReducers } from \"redux\"; // (이전상태, 액션) => 다음상태\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"names":["HYDRATE","user","post","combineReducers","rootReducer","index","state","action","type","console","log","payload"],"sources":["C:/Users/leeoo/Desktop/teamProject/trip-sns/front/reducers/index.js"],"sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\n\r\nimport user from './user';\r\nimport post from './post';\r\nimport { combineReducers } from \"redux\";\r\n\r\n\r\n// (이전상태, 액션) => 다음상태\r\nconst rootReducer = combineReducers ({\r\n    index: (state = {}, action) => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            console.log('HYDRATE', action);\r\n            return { ...state, ...action.payload };\r\n\r\n        default:\r\n            return state;\r\n        }\r\n    },\r\n    user,\r\n    post,  \r\n});\r\n\r\nexport default rootReducer;"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CAGA;;AACA,MAAMC,WAAW,GAAGD,eAAe,CAAE;EACjCE,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;IAC/B,QAAQA,MAAM,CAACC,IAAf;MACI,KAAKR,OAAL;QACIS,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;QACA,uCAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;MAEJ;QACI,OAAOL,KAAP;IANR;EAQC,CAVgC;EAWjCL,IAXiC;EAYjCC;AAZiC,CAAF,CAAnC;AAeA,eAAeE,WAAf"},"metadata":{},"sourceType":"module"}