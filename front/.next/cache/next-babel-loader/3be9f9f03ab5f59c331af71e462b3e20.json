{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga login'); //const result = yield call(logInAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    //const result = yield call(logOutAPI) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // takeLatest 실수로 로그인 따닥 두번 실행했을 때 앞에 실수거는 무시되고 마지막것만 요청됨\n  // while로 감싸는 이유? 이거 이벤트리스너같은건데 일회용이라서 => takeEvery\n  yield takeLatest(LOG_IN_REQUEST, logIn); // take란 LOG_IN 액션이 실행될 때 까지 기다리겠다\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"names":["all","fork","put","takeLatest","delay","axios","logInAPI","data","post","logIn","action","console","log","type","LOG_IN_SUCCESS","err","LOG_IN_FAILURE","error","response","logOutAPI","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogIn","LOG_IN_REQUEST","watchLogOut","LOG_OUT_REQUEST","userSaga"],"sources":["C:/Users/leeoo/Desktop/teamProject/front/sagas/user.js"],"sourcesContent":["import { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        console.log('saga login');\r\n        //const result = yield call(logInAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n             data: action.data,\r\n        });\r\n        } catch (err) {\r\n            yield put({\r\n                type: LOG_IN_FAILURE,\r\n                error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        //const result = yield call(logOutAPI) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n        } catch (err) {\r\n            yield put({\r\n                type: LOG_OUT_FAILURE,\r\n                error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    // takeLatest 실수로 로그인 따닥 두번 실행했을 때 앞에 실수거는 무시되고 마지막것만 요청됨\r\n    // while로 감싸는 이유? 이거 이벤트리스너같은건데 일회용이라서 => takeEvery\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);  // take란 LOG_IN 액션이 실행될 때 까지 기다리겠다\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);  \r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;EACpB,OAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;EACpB,IAAI;IACAC,OAAO,CAACC,GAAR,CAAY,YAAZ,EADA,CAEA;;IACA,MAAMR,KAAK,CAAC,IAAD,CAAX;IACA,MAAMF,GAAG,CAAC;MACNW,IAAI,EAAEC,cADA;MAELP,IAAI,EAAEG,MAAM,CAACH;IAFR,CAAD,CAAT;EAIC,CARL,CAQM,OAAOQ,GAAP,EAAY;IACV,MAAMb,GAAG,CAAC;MACNW,IAAI,EAAEG,cADA;MAENC,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaX;IAFd,CAAD,CAAT;EAIP;AACJ;;AAED,SAASY,SAAT,GAAqB;EACjB,OAAOd,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUY,MAAV,GAAmB;EACf,IAAI;IACA;IACA,MAAMhB,KAAK,CAAC,IAAD,CAAX;IACA,MAAMF,GAAG,CAAC;MACNW,IAAI,EAAEQ;IADA,CAAD,CAAT;EAGC,CANL,CAMM,OAAON,GAAP,EAAY;IACV,MAAMb,GAAG,CAAC;MACNW,IAAI,EAAES,eADA;MAENL,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaX;IAFd,CAAD,CAAT;EAIP;AACJ;;AAED,UAAUgB,UAAV,GAAuB;EACnB;EACA;EACA,MAAMpB,UAAU,CAACqB,cAAD,EAAiBf,KAAjB,CAAhB,CAHmB,CAGuB;AAC7C;;AAED,UAAUgB,WAAV,GAAwB;EACpB,MAAMtB,UAAU,CAACuB,eAAD,EAAkBN,MAAlB,CAAhB;AACH;;AAGD,eAAe,UAAUO,QAAV,GAAqB;EAChC,MAAM3B,GAAG,CAAC,CACNC,IAAI,CAACsB,UAAD,CADE,EAENtB,IAAI,CAACwB,WAAD,CAFE,CAAD,CAAT;AAIH"},"metadata":{},"sourceType":"module"}