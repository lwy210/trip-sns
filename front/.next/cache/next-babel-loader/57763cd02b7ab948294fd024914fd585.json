{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\leeoo\\\\Desktop\\\\teamProject\\\\front\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\nvar Home = function Home() {\n  _s();\n\n  // useEffect로 컴포넌트 마운트 효과를 넣을 수 있다. 뒤에 빈배열만 넣는 다면.\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost;\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(function () {\n    function onScroll() {\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n    } // 스크롤 끝까지 내렸을 때 게시글 더 로드해서 다시 내려가게 하는 거\n\n\n    if (window.scrollY + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\n      if (hasMorePost) {\n        // 리듀서에서 정의했음. 50개 이하면 true\n        dispatch({\n          type: LOAD_POSTS_REQUEST\n        });\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePost]);\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, me && __jsx(PostForm, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 20\n    }\n  }), mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 38\n      }\n    });\n  }));\n};\n\n_s(Home, \"t5W3f13kdHJN+C4GYAtNP8Viywk=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePost","type","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","map","id"],"sources":["C:/Users/leeoo/Desktop/teamProject/front/pages/index.js"],"sourcesContent":["import React, {useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\n\r\nconst Home = () => {\r\n    // useEffect로 컴포넌트 마운트 효과를 넣을 수 있다. 뒤에 빈배열만 넣는 다면.\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state) => state.user);\r\n    const { mainPosts, hasMorePost } = useSelector((state) => state.post);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch({\r\n            type: LOAD_POSTS_REQUEST\r\n        });\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        function onScroll() {\r\n            console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\r\n        }\r\n        // 스크롤 끝까지 내렸을 때 게시글 더 로드해서 다시 내려가게 하는 거\r\n        if (window.scrollY + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\r\n            if (hasMorePost) { // 리듀서에서 정의했음. 50개 이하면 true\r\n                dispatch({\r\n                    type: LOAD_POSTS_REQUEST,\r\n                });\r\n            }\r\n        }\r\n\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        }\r\n    }, [hasMorePost]);\r\n\r\n\r\n    return (\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n        </AppLayout>\r\n    );\r\n}\r\n\r\nexport default Home; "],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;EAAA;;EACf;EACA,IAAMC,QAAQ,GAAGP,WAAW,EAA5B;;EACA,mBAAeC,WAAW,CAAC,UAACO,KAAD;IAAA,OAAWA,KAAK,CAACC,IAAjB;EAAA,CAAD,CAA1B;EAAA,IAAQC,EAAR,gBAAQA,EAAR;;EACA,oBAAmCT,WAAW,CAAC,UAACO,KAAD;IAAA,OAAWA,KAAK,CAACG,IAAjB;EAAA,CAAD,CAA9C;EAAA,IAAQC,SAAR,iBAAQA,SAAR;EAAA,IAAmBC,WAAnB,iBAAmBA,WAAnB;;EAGAd,SAAS,CAAC,YAAM;IACZQ,QAAQ,CAAC;MACLO,IAAI,EAAET;IADD,CAAD,CAAR;EAGH,CAJQ,EAIN,EAJM,CAAT;EAOAN,SAAS,CAAC,YAAM;IACZ,SAASgB,QAAT,GAAoB;MAChBC,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA4BC,QAAQ,CAACC,eAAT,CAAyBC,YAArD,EAAmEF,QAAQ,CAACC,eAAT,CAAyBE,YAA5F;IACH,CAHW,CAIZ;;;IACA,IAAIL,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,KAA2DF,QAAQ,CAACC,eAAT,CAAyBE,YAAxF,EAAsG;MAClG,IAAIV,WAAJ,EAAiB;QAAE;QACfN,QAAQ,CAAC;UACLO,IAAI,EAAET;QADD,CAAD,CAAR;MAGH;IACJ;;IAEDa,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCT,QAAlC;IACA,OAAO,YAAM;MACTG,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCV,QAArC;IACH,CAFD;EAGH,CAjBQ,EAiBN,CAACF,WAAD,CAjBM,CAAT;EAoBA,OACI,MAAC,SAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACKH,EAAE,IAAI,MAAC,QAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADX,EAEKE,SAAS,CAACc,GAAV,CAAc,UAACf,IAAD;IAAA,OAAU,MAAC,QAAD;MAAU,GAAG,EAAEA,IAAI,CAACgB,EAApB;MAAwB,IAAI,EAAEhB,IAA9B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAV;EAAA,CAAd,CAFL,CADJ;AAMH,CAxCD;;GAAML,I;UAEeN,W,EACFC,W,EACoBA,W;;;KAJjCK,I;AA0CN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}