{"ast":null,"code":"import { all, delay, put, takeLatest, fork } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    //const result = yield call(loadPostsAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addCommentAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","delay","put","takeLatest","fork","axios","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","loadPostsAPI","get","loadPosts","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/leeoo/Desktop/teamProject/front/sagas/post.js"],"sourcesContent":["import { all, delay, put, takeLatest, fork } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport { \r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME, } from \"../reducers/user\";\r\nimport shortId from 'shortid';\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        })\r\n        } catch (err) {\r\n            yield put({\r\n                type: ADD_POST_FAILURE,\r\n                data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        //const result = yield call(loadPostsAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDummyPost(10),\r\n        });\r\n        } catch (err) {\r\n            yield put({\r\n                type: LOAD_POSTS_FAILURE,\r\n                data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        //const result = yield call(removePostAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        })\r\n        } catch (err) {\r\n            yield put({\r\n                type: REMOVE_POST_FAILURE,\r\n                data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        //const result = yield call(addCommentAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        });\r\n        } catch (err) {\r\n            yield put({\r\n                type: ADD_COMMENT_FAILURE,\r\n                data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}