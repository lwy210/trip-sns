{"ast":null,"code":"import { all, delay, put, takeLatest, fork } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addCommentAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","delay","put","takeLatest","fork","axios","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/leeoo/Desktop/teamProject/front/sagas/post.js"],"sourcesContent":["import { all, delay, put, takeLatest, fork } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport { \r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME, } from \"../reducers/user\";\r\nimport shortId from 'shortid';\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        })\r\n        } catch (err) {\r\n            yield put({\r\n                type: ADD_POST_FAILURE,\r\n                data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        //const result = yield call(removePostAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        })\r\n        } catch (err) {\r\n            yield put({\r\n                type: REMOVE_POST_FAILURE,\r\n                data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        //const result = yield call(addCommentAPI, action.data) // call은 logInAPI가 return할 때까지 기다려서 result에 넣어주는데 fork는 비동기라서 바로 다음께 실행된다 \r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        });\r\n        } catch (err) {\r\n            yield put({\r\n                type: ADD_COMMENT_FAILURE,\r\n                data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}