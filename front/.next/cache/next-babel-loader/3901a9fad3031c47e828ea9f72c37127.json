{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\leeoo\\\\Desktop\\\\teamProject\\\\front\\\\components\\\\PostForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Form, Input, Button, Modal } from 'antd';\nimport React, { useCallback, useState, useRef, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useInput from '../hooks/useInput';\nimport { addPost } from '../reducers/post';\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var _useState = useState(false),\n      isModalOpen = _useState[0],\n      seIsModalOpen = _useState[1];\n\n  var showModal = function showModal() {\n    setIsModalOpen(true);\n  };\n\n  var handleOk = function handleOk() {\n    setIsModalOpen(false);\n  };\n\n  var handleCancle = function handleCancle() {\n    setIsModalOpen(false);\n  };\n\n  var onSubmit = useCallback(function () {// 모달 불러오기\n  });\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    block: true,\n    onClick: showModal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \"+ \\uB0B4 \\uC5EC\\uD589 \\uAC8C\\uC2DC\\uAE00 \\uC791\\uC131\\uD558\\uAE30\"), __jsx(Modal, {\n    title: \"\\uAC8C\\uC2DC\\uAE00 \\uC791\\uC131\\uD558\\uAE30\",\n    open: isModalOpen,\n    onOk: handleOk,\n    onCancel: handleCancle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, \"Some contents...\"), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, \"Some contents...\"), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, \"Some contents...\"))); // const { imagePaths, addPostDone } = useSelector((state) => state.post);\n  // const dispatch = useDispatch();\n  // const imageInput = useRef();\n  // const [text, onChangeText, setText] = useInput('');\n  // useEffect(() => {\n  //     if (addPostDone) {\n  //         setText('');\n  //     }\n  // }, [addPostDone]);\n  // const onSubmit = useCallback(() => {\n  //     dispatch(addPost(text));\n  // }, [text]);\n  // const onClickImageUpload = useCallback(()=> {\n  //     imageInput.current.click();\n  // }, [imageInput.current]);\n  // return (\n  //     <Form style={{margin: '10px 0 20px'}} encType='multipart/form-data' onFinish={onSubmit}>\n  //         <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" />\n  //         <div>\n  //             <input type=\"file\" multiple hidden ref={imageInput}/>\n  //             <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n  //             <Button type=\"primary\" style={{float: 'right'}} htmlType=\"submit\">짹짹</Button>\n  //         </div>\n  //         <div>\n  //             {imagePaths.map((v) => (\n  //                 <div key={v} style={{display:'inline-block'}}>\n  //                     <img src={v} style={{width:'200px'}} alt={v} />\n  //                     <div>\n  //                         <Button>제거</Button>\n  //                     </div>\n  //                 </div>\n  //             ))}\n  //         </div>\n  //     </Form>\n  // )\n};\n\n_s(PostForm, \"NdTJKGZPuD7JLRc9+kWsqmGERdQ=\");\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"names":["Form","Input","Button","Modal","React","useCallback","useState","useRef","useEffect","useDispatch","useSelector","useInput","addPost","PostForm","isModalOpen","seIsModalOpen","showModal","setIsModalOpen","handleOk","handleCancle","onSubmit"],"sources":["C:/Users/leeoo/Desktop/teamProject/front/components/PostForm.js"],"sourcesContent":["import { Form, Input, Button, Modal } from 'antd';\r\nimport React, { useCallback, useState, useRef, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport useInput from '../hooks/useInput';\r\nimport { addPost } from '../reducers/post';\r\n\r\n\r\nconst PostForm = () => {\r\n    const [isModalOpen, seIsModalOpen] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalOpen(false);\r\n    }\r\n\r\n    const handleCancle = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const onSubmit = useCallback(() => {\r\n        // 모달 불러오기\r\n    });\r\n\r\n    return(\r\n        <>\r\n            <Button block onClick={showModal}>+ 내 여행 게시글 작성하기</Button>\r\n            <Modal title=\"게시글 작성하기\" open={isModalOpen} onOk={handleOk} onCancel={handleCancle}>\r\n                <p>Some contents...</p>\r\n                <p>Some contents...</p>\r\n                <p>Some contents...</p>\r\n            </Modal>\r\n        \r\n        </>\r\n\r\n    )\r\n    // const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n    // const dispatch = useDispatch();\r\n    // const imageInput = useRef();\r\n    // const [text, onChangeText, setText] = useInput('');\r\n\r\n    // useEffect(() => {\r\n    //     if (addPostDone) {\r\n    //         setText('');\r\n    //     }\r\n    // }, [addPostDone]);\r\n\r\n\r\n    // const onSubmit = useCallback(() => {\r\n    //     dispatch(addPost(text));\r\n\r\n    // }, [text]);\r\n\r\n    // const onClickImageUpload = useCallback(()=> {\r\n    //     imageInput.current.click();\r\n    // }, [imageInput.current]);\r\n    // return (\r\n    //     <Form style={{margin: '10px 0 20px'}} encType='multipart/form-data' onFinish={onSubmit}>\r\n    //         <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" />\r\n    //         <div>\r\n    //             <input type=\"file\" multiple hidden ref={imageInput}/>\r\n    //             <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n    //             <Button type=\"primary\" style={{float: 'right'}} htmlType=\"submit\">짹짹</Button>\r\n    //         </div>\r\n    //         <div>\r\n    //             {imagePaths.map((v) => (\r\n    //                 <div key={v} style={{display:'inline-block'}}>\r\n    //                     <img src={v} style={{width:'200px'}} alt={v} />\r\n    //                     <div>\r\n    //                         <Button>제거</Button>\r\n    //                     </div>\r\n    //                 </div>\r\n    //             ))}\r\n    //         </div>\r\n    //     </Form>\r\n    // )\r\n};\r\n\r\nexport default PostForm;"],"mappings":";;;;;AAAA,SAASA,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,KAA9B,QAA2C,MAA3C;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,MAAvC,EAA+CC,SAA/C,QAAgE,OAAhE;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,OAAT,QAAwB,kBAAxB;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;EAAA;;EACnB,gBAAqCP,QAAQ,CAAC,KAAD,CAA7C;EAAA,IAAOQ,WAAP;EAAA,IAAoBC,aAApB;;EAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;IACpBC,cAAc,CAAC,IAAD,CAAd;EACH,CAFD;;EAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;IACnBD,cAAc,CAAC,KAAD,CAAd;EACH,CAFD;;EAIA,IAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;IACvBF,cAAc,CAAC,KAAD,CAAd;EACH,CAFD;;EAIA,IAAMG,QAAQ,GAAGf,WAAW,CAAC,YAAM,CAC/B;EACH,CAF2B,CAA5B;EAIA,OACI,4BACI,MAAC,MAAD;IAAQ,KAAK,MAAb;IAAc,OAAO,EAAEW,SAAvB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,uEADJ,EAEI,MAAC,KAAD;IAAO,KAAK,EAAC,6CAAb;IAAwB,IAAI,EAAEF,WAA9B;IAA2C,IAAI,EAAEI,QAAjD;IAA2D,QAAQ,EAAEC,YAArE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,sBADJ,EAEI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,sBAFJ,EAGI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,sBAHJ,CAFJ,CADJ,CAnBmB,CA+BnB;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAGA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACH,CAvED;;GAAMN,Q;;KAAAA,Q;AAyEN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}