{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leeoo\\\\Desktop\\\\teamProject\\\\front\\\\components\\\\FollowList.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { List, Button, Avatar } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FOLLOW_REQUEST, UNFOLLOW_REQUEST } from '../reducers/user';\n\nconst FollowList = ({\n  user,\n  data\n}) => {\n  const dispatch = useDispatch();\n  const {\n    me,\n    followLoading,\n    unfollowLoading\n  } = useSelector(state => state.user); // 리덕스에서 내 정보 받아오고\n\n  const isFollowing = user === null || user === void 0 ? void 0 : user.Followings.find(v => v.id === data.id); // 포스트 작성한 사람들 중에 내가 팔로윙한 사람들\n\n  const item_id = 0;\n  const onClickButton = useCallback(() => {\n    if (isFollowing) {\n      // 내가 팔로잉을 하고 있는데 버튼을 눌렀다\n      dispatch({\n        type: UNFOLLOW_REQUEST,\n        data: item_id\n      });\n    } else {\n      dispatch({\n        type: FOLLOW_REQUEST,\n        data: item_id\n      });\n    }\n  }, [item_id, isFollowing]);\n  return __jsx(List, {\n    bordered: true,\n    itemLayout: \"horizontal\",\n    dataSource: data,\n    renderItem: item => __jsx(List.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }, __jsx(List.Item.Meta, {\n      avatar: __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 29\n        }\n      }, item.nickname[0]),\n      title: item.nickname,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }\n    }), __jsx(Button, {\n      loading: followLoading || unfollowLoading,\n      onClick: onClickButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }\n    }, isFollowing ? '언팔로우' : '팔로우', item.id), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }\n    }, item_id = item.id)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }); // return (\n  //     <List \n  //         style={{marginBottom: 20}}\n  //         grid={{gutter: 4, xs: 2, md: 3}}\n  //         size=\"small\"\n  //         header={<div>{header}</div>}\n  //         loadMore={<div style={{textAlign: 'center', margin: '10px 0'}}><Button>더 보기</Button></div>}\n  //         bordered\n  //         dataSource={data}\n  //         renderItem={(item) => (\n  //             <List.Item style={{marginTop:20}}>\n  //                 <Card actions={[<StopOutlined key=\"stop\"/>]}>\n  //                     <Card.Meta description={item.nickname} />\n  //                 </Card>\n  //             </List.Item>\n  //         )}\n  //     />\n  // )\n};\n\nFollowList.propTypes = {\n  header: PropTypes.string.isRequired,\n  data: PropTypes.array.isRequired\n};\nexport default FollowList;","map":{"version":3,"names":["React","useCallback","PropTypes","List","Button","Avatar","useDispatch","useSelector","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FollowList","user","data","dispatch","me","followLoading","unfollowLoading","state","isFollowing","Followings","find","v","id","item_id","onClickButton","type","item","nickname","propTypes","header","string","isRequired","array"],"sources":["C:/Users/leeoo/Desktop/teamProject/front/components/FollowList.js"],"sourcesContent":["import React, { useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { List, Button, Avatar } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FOLLOW_REQUEST, UNFOLLOW_REQUEST } from '../reducers/user';\r\n\r\nconst FollowList = ({user, data}) => {\r\n    const dispatch = useDispatch();\r\n    const { me, followLoading, unfollowLoading } = useSelector((state) => state.user); // 리덕스에서 내 정보 받아오고\r\n    const isFollowing = user?.Followings.find((v) => v.id === data.id) // 포스트 작성한 사람들 중에 내가 팔로윙한 사람들\r\n    const item_id = 0\r\n\r\n    const onClickButton = useCallback(() => {\r\n        if (isFollowing) { // 내가 팔로잉을 하고 있는데 버튼을 눌렀다\r\n            dispatch({\r\n                type: UNFOLLOW_REQUEST,\r\n                data: item_id,\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: FOLLOW_REQUEST,\r\n                data: item_id,\r\n            });\r\n        }\r\n    }, [item_id, isFollowing]);\r\n\r\n    return (\r\n        <List \r\n            bordered\r\n            itemLayout=\"horizontal\"\r\n            dataSource={data}\r\n            renderItem={(item) => (\r\n                <List.Item>\r\n                    <List.Item.Meta \r\n                    avatar={<Avatar>{item.nickname[0]}</Avatar>}\r\n                    title={item.nickname}\r\n                    />\r\n                    <Button loading={followLoading || unfollowLoading} onClick={onClickButton}>\r\n                    {isFollowing ? '언팔로우' : '팔로우'}\r\n                    {item.id}\r\n                    </Button>\r\n                    <div>{item_id = item.id}</div>\r\n                </List.Item>\r\n            )}\r\n        />\r\n    )\r\n    // return (\r\n    //     <List \r\n    //         style={{marginBottom: 20}}\r\n    //         grid={{gutter: 4, xs: 2, md: 3}}\r\n    //         size=\"small\"\r\n    //         header={<div>{header}</div>}\r\n    //         loadMore={<div style={{textAlign: 'center', margin: '10px 0'}}><Button>더 보기</Button></div>}\r\n    //         bordered\r\n    //         dataSource={data}\r\n    //         renderItem={(item) => (\r\n    //             <List.Item style={{marginTop:20}}>\r\n    //                 <Card actions={[<StopOutlined key=\"stop\"/>]}>\r\n    //                     <Card.Meta description={item.nickname} />\r\n    //                 </Card>\r\n    //             </List.Item>\r\n    //         )}\r\n    //     />\r\n    // )\r\n};\r\n\r\nFollowList.propTypes = {\r\n    header: PropTypes.string.isRequired,\r\n    data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default FollowList;"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,MAAvB,QAAqC,MAArC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,kBAAjD;;AAEA,MAAMC,UAAU,GAAG,CAAC;EAACC,IAAD;EAAOC;AAAP,CAAD,KAAkB;EACjC,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;EACA,MAAM;IAAEQ,EAAF;IAAMC,aAAN;IAAqBC;EAArB,IAAyCT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACN,IAAlB,CAA1D,CAFiC,CAEkD;;EACnF,MAAMO,WAAW,GAAGP,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEQ,UAAN,CAAiBC,IAAjB,CAAuBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASV,IAAI,CAACU,EAA3C,CAApB,CAHiC,CAGkC;;EACnE,MAAMC,OAAO,GAAG,CAAhB;EAEA,MAAMC,aAAa,GAAGvB,WAAW,CAAC,MAAM;IACpC,IAAIiB,WAAJ,EAAiB;MAAE;MACfL,QAAQ,CAAC;QACLY,IAAI,EAAEhB,gBADD;QAELG,IAAI,EAAEW;MAFD,CAAD,CAAR;IAIH,CALD,MAKO;MACHV,QAAQ,CAAC;QACLY,IAAI,EAAEjB,cADD;QAELI,IAAI,EAAEW;MAFD,CAAD,CAAR;IAIH;EACJ,CAZgC,EAY9B,CAACA,OAAD,EAAUL,WAAV,CAZ8B,CAAjC;EAcA,OACI,MAAC,IAAD;IACI,QAAQ,MADZ;IAEI,UAAU,EAAC,YAFf;IAGI,UAAU,EAAEN,IAHhB;IAII,UAAU,EAAGc,IAAD,IACR,MAAC,IAAD,CAAM,IAAN;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACI,MAAC,IAAD,CAAM,IAAN,CAAW,IAAX;MACA,MAAM,EAAE,MAAC,MAAD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAASA,IAAI,CAACC,QAAL,CAAc,CAAd,CAAT,CADR;MAEA,KAAK,EAAED,IAAI,CAACC,QAFZ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADJ,EAKI,MAAC,MAAD;MAAQ,OAAO,EAAEZ,aAAa,IAAIC,eAAlC;MAAmD,OAAO,EAAEQ,aAA5D;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACCN,WAAW,GAAG,MAAH,GAAY,KADxB,EAECQ,IAAI,CAACJ,EAFN,CALJ,EASI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAMC,OAAO,GAAGG,IAAI,CAACJ,EAArB,CATJ,CALR;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,CApBiC,CAwCjC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACH,CA1DD;;AA4DAZ,UAAU,CAACkB,SAAX,GAAuB;EACnBC,MAAM,EAAE3B,SAAS,CAAC4B,MAAV,CAAiBC,UADN;EAEnBnB,IAAI,EAAEV,SAAS,CAAC8B,KAAV,CAAgBD;AAFH,CAAvB;AAKA,eAAerB,UAAf"},"metadata":{},"sourceType":"module"}